name: .NET Deploy to IIS

on: 
  push:
    branches:
      - "passion-release"

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build-and-deploy:

    runs-on: windows-2019
    
    steps:
      - uses: actions/checkout@v2

      # - name: Setup .NET Core
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: '6.0.x'

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup Nuget.exe for use with actions
        uses: Nuget/Setup-nuget@v1.0.5

      - name: Restore Nuget Packages
        run: nuget restore Rock.sln

      - name: Build Solution
        run: |
          dir env:
          $env:GITHUB_WORKSPACE
          $env:DevEnvDir = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\'

          Get-ChildItem
          $paths = @("Applications\Wpf\CheckScannerUtility\AXInteropBuilder\AXInteropBuilder.csproj",
            "Applications\Wpf\CheckScannerUtility\CheckScannerUtility\CheckScannerUtility.csproj")
          #   "Applications/Wpf/Rock.Wpf/Rock.Wpf.csproj",
          #   "Applications/Wpf/StatementGenerator/StatementGenerator.csproj",
          #   "Dev Tools/Applications/CheckVariableNaming/CheckVariableNaming.csproj",
          #   "Dev Tools/Applications/EnsureCopyrightHeader/EnsureCopyrightHeader.csproj",
          #   "Dev Tools/Applications/GuidToClipboard/GuidToClipboard.csproj",
          #   "DotLiquid/DotLiquid.csproj",
          #   "Installers/RockInstaller/InstallTools/InstallTools.csproj",
          #   "Installers/RockInstaller/RockInstallTools/RockInstallTools.csproj",
          #   "Quartz/Quartz.csproj",
          #   "Rock.Blocks/Rock.Blocks.csproj",
          #   "Rock.Checkr/Rock.Checkr.csproj",
          #   "Rock.Client/Rock.Client.csproj",
          #   "Rock.CodeGeneration/Rock.CodeGeneration.csproj",
          #   "Rock.Common.Web/Rock.Common.Web.csproj",
          #   "Rock.Common/Rock.Common.csproj",
          #   "Rock.DownhillCss/Rock.DownhillCss.csproj",
          #   "Rock.Lava.DotLiquid/Rock.Lava.DotLiquid.csproj",
          #   "Rock.Lava.Fluid/Rock.Lava.Fluid.csproj",
          #   "Rock.Lava.Shared/Rock.Lava.Shared.csproj",
          #   "Rock.Lava/Rock.Lava.csproj",
          #   "Rock.Mailgun/Rock.Mailgun.csproj",
          #   "Rock.Mandrill/Rock.Mandrill.csproj",
          #   "Rock.Migrations/Rock.Migrations.csproj",
          #   "Rock.MyWell/Rock.MyWell.csproj",
          #   "Rock.NMI/Rock.NMI.csproj",
          #   "Rock.Oidc/Rock.Oidc.csproj",
          #   "Rock.PayFlowPro/Rock.PayFlowPro.csproj",
          #   "Rock.Rest/Rock.Rest.csproj",
          #   "Rock.RestClient/Rock.RestClient.csproj",
          #   "Rock.Security.Authentication.Auth0/Rock.Security.Authentication.Auth0.csproj",
          #   "Rock.SendGrid/Rock.SendGrid.csproj",
          #   "Rock.SignNow/Rock.SignNow.csproj",
          #   "Rock.Slingshot.Model/Rock.Slingshot.Model.csproj",
          #   "Rock.Slingshot/Rock.Slingshot.csproj",
          #   "Rock.StatementGenerator/Rock.StatementGenerator.csproj",
          #   "Rock.Tests.Integration/Rock.Tests.Integration.csproj",
          #   "Rock.Tests.Shared/Rock.Tests.Shared.csproj",
          #   "Rock.Tests.UnitTests/Rock.Tests.UnitTests.csproj",
          #   "Rock.Update/Rock.Update.csproj",
          #   "Rock.Version/Rock.Version.csproj",
          #   "Rock.ViewModel/Rock.ViewModel.csproj",
          #   "Rock.WebStartup/Rock.WebStartup.csproj",
          #   "Rock/Rock.csproj",
          #   "SignNowSDK/SignNowSDK.csproj"


          $search = "<OutputPath>bin\\Debug\\<\/OutputPath>"
          $replace = "<OutputPath>..\RockWeb\Bin\</OutputPath>"

          ForEach ($path in $paths) {
            $thePath = "$env:GITHUB_WORKSPACE\$path"
            echo $thePath
            Get-Content -path $thePath
            ((Get-Content -path $thePath -Raw) -replace $search,$replace) | Set-Content -Path $thePath
            Get-Content -path $thePath
          }

          exit
          msbuild Rock.sln /p:Configuration=Release /t:Rebuild
          # msbuild "Rock.Javascript.Obsidian" /p:Configuration=Release /t:Rebuild

      - name: Upload archive
        run: |
          # List env vars
          dir env:
          Compress-Archive -Path $env:GITHUB_WORKSPACE\RockWeb\* -DestinationPath $env:GITHUB_WORKSPACE\rockweb.zip -Force
          aws s3 cp $env:GITHUB_WORKSPACE\rockweb.zip s3://connect-deployments

      # - name: Deploy website archive`
      #   run: |
      #     aws autoscaling start-instance-refresh --auto-scaling-group-name "test-connect-asg"

    # - name: Setup Nuget.exe for us`e with actions
    #   uses: Nuget/Setup-nuget@v1.0.2

    # - name: Add dependencies for ASP.NET
    #   run: |
    #     wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    #     sudo dpkg -i packages-microsoft-prod.deb
    #     sudo apt-get update; sudo apt-get install -y apt-transport-https && sudo apt-get update && sudo apt-get install -y dotnet-sdk-5.0

    # - name: Install dependencies
    #   run: dotnet restore

    # - name: Build with dotnet
    #   run: |
    #     dotnet build --configuration Release Rock

    # - name: dotnet publish 
    #   run: |
    #     dotnet publish -c Release -o dotnetwebapp .\dotnet-webapp
    # - name: Deploy to IIS
    #   run: |
    #     iisreset /stop
    #     Copy-Item ./dotnetwebapp/* C:/inetpub/wwwroot/dotnet-webapp -Recurse -Force
    #     iisreset /start
    
    # - name: Curl the website as a smoke test
    #   run: curl http://localhost/dotnet-webapp

    # - name: Run Web Test
    #   run: |
    #     dotnet build --configuration Release .\dotnet-webapp.webtest
    #     cd .\dotnet-webapp.webtests
    #     dotnet test